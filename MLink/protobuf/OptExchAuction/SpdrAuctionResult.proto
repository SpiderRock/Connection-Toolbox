syntax = "proto3";

import "spiderrock_common.proto";


package spiderrock.protobuf;

import "google/protobuf/timestamp.proto";

/*
    SpdrAuctionResult messages are published by SR ExecEngines and have complete markup detail for the auction notice including detail about SR responses.
*/    
message SpdrAuctionResult {
    message PKey {
        
        OptionKey sec_key = 10;
        SpdrKeyType sec_type = 11;
        OptExch auction_exch = 12; // exchange handling the auction
        string auction_ex_dest = 13; // external exDest of auction (usually means auction is off-exchange)
        RunStatus run_status = 14;
    }

    message Legs {
        
        OptionKey leg_sec_key = 211;
        SpdrKeyType leg_sec_type = 214;
        BuySell leg_side = 217;
        uint32 leg_ratio = 220; // leg ratio (1, 2, etc)
    }


    MessageMetadata _meta = 1;
    
    PKey pkey = 2;
    int64 sr_auction_iD = 100; // unique SR AUCTION ID (required when responding to an auction notice)
    string exch_auction_id = 103;
    string exch_auction_type = 106;
    NoticeShape auction_shape = 109;
    AuctionType auction_type = 112;
    BuySell auction_side = 115; // Market side (client/imbalance side of auction; if known) [responder should be opposite side]
    int32 matched_size = 118; // already matched size
    int32 auction_size = 121; // auction size (includes already matched size)
    double auction_price = 124; // auction price (can be positive or negative)
    YesNo is_auction_price_valid = 127;
    int32 auction_duration = 130; // expected auction / imbalance action duration (ms)
    int64 auction_start_timestamp = 133; // auction / action start timestamp
    int32 min_response_size = 136; // minimum size of the response order
    AuctionLimitType client_limit_type = 139; // client / imbalance limit type (if available)
    FirmType firm_type = 142; // firm type of the client side of auction (if available)
    string member_mPID = 145; // exchange member initiating auction (if available)
    string client_accnt = 148; // client account designation (if known)
    string other_detail = 151; // additional auction detail (exchange specific)
    MarketStatus market_status = 154; // market status (pre-open, open, closed, etc)
    int32 num_updates = 157; // number of auction update messages (since start of auction)
    int64 auction_final_timestamp = 160; // last auction message timestamp (excluding the auction closed notice; if any)
    int32 auction_start_size = 163; // initial auction size (size @ start of auction)
    double auction_start_price = 166;
    int32 auction_start_matched_size = 169; // initial auction match size (size @ start of auction)
    int32 num_responses = 172; // as reported by exchange (if available)
    int32 best_response_size = 175;
    double best_response_price = 178;
    int32 cum_fill_quantity = 181; // as reported by exchange (if available)
    double avg_fill_price = 184;
    double auction_final_price = 187; // avgFillPrice (exchange result, if available) or best of [avgPrintPrice, nbboMarket, or auctionStartPrice]
    int64 src_timestamp = 190; // source timestamp (nanoseconds) if available
    int64 net_timestamp = 193; // network timestamp message arrival @ direct exchange gateway
    int64 dgw_timestamp = 196; // network timestamp mbus message send @ direct exchange gateway
    int64 mmr_timestamp = 199; // network timestamp of EE/MMR Host packet received (.netTimestampRcvd)
    int64 eng_timestamp = 202; // network timestamp of EE handler packet arrival
    google.protobuf.Timestamp timestamp = 205;
    double auction_start = 223; // system start time (internal use)
    AuctionMktStance auction_nbbo_stance = 226;
    AuctionMktStance auction_exch_stance = 229;
    float bid_price = 232; // nbbo bid price		@ auction start
    float ask_price = 235; // nbbo ask price
    int32 cum_bid_size = 238; // cum nbbo bid size		@ auction start
    int32 cum_ask_size = 241; // cum nbbo ask size
    float exch_bid_prc = 244; // exch bid price	@ auction start
    float exch_ask_prc = 247; // exch ask price
    int32 exch_bid_size = 250; // exch bid size		@ auction start
    int32 exch_ask_size = 253; // exch ask size
    float rsp_probability = 256; // probability that auction will be profitable (for the auction responder) [if auctionPrice specified]
    float svol = 259; // SpiderRock surface volatility		@ auction start
    float sprc = 262; // SpiderRock surface price
    float vega = 265; // option vega
    float delta = 268; // option delta
    float s_edge_start = 271; // surface edge (auction start price to SR surface; if both exist)
    float s_edge_print = 274; // surface edge (estimated final auction price to SR surface; if both exist)
    float u_bid = 277; // underlier bid price		@ auction start
    float u_ask = 280; // underlier ask price
    float u_bid_t = 283; // underlier bid price		@ auction termination
    float u_ask_t = 286; // underlier ask price
    AuctionPrintResult auction_print_result = 289;
    float first_print_size = 292; // first print (fractional if part of a spread) in the auction window (T-25ms -to- T+150ms)
    double first_print_price = 295; // print price (single or spread) of all prints making up firtPrintSize
    PrtSide first_print_side = 298; // print side
    PrtType first_print_type = 301; // print type code (from OPRA feed)
    int64 first_src_timestamp = 304; // src timestamp of first OPRA print
    int64 first_net_timestamp = 307; // net timestamp of first OPRA print
    float first_src_latency = 310; // auction initSrcTimestamp to first print srcTimestamp
    float first_net_latency = 313; // auction initNetTimestamp to first print netTimestamp
    int32 first_away_prt_size = 316; // first print on an away exchange (if any in window)
    double first_away_prt_price = 319;
    float first_away_net_latency = 322;
    int32 num_prints = 325; // all prints (all print codes) in the auction window (T-25ms -to- T+150ms)
    int32 cum_print_size = 328;
    double avg_print_price = 331;
    int32 num_print_legs = 334; // total number of spread legs
    float mark_m1 = 337;
    float u_mark_m1 = 340;
    float pnl_m1 = 343;
    YesNo pnl_m1_err = 346;
    float mark_m10 = 349;
    float u_mark_m10 = 352;
    float pnl_m10 = 355;
    YesNo pnl_m10_err = 358;
    repeated Legs legs = 208;
}


