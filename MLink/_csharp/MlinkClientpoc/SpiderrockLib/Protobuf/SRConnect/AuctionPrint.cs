// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/SRConnect/AuctionPrint.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/SRConnect/AuctionPrint.proto</summary>
  public static partial class AuctionPrintReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/SRConnect/AuctionPrint.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AuctionPrintReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiVQcm90b2J1Zi9TUkNvbm5lY3QvQXVjdGlvblByaW50LnByb3RvEhNzcGlk",
            "ZXJyb2NrLnByb3RvYnVmGhdzcGlkZXJyb2NrX2NvbW1vbi5wcm90bxofZ29v",
            "Z2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90byK1DgoMQXVjdGlvblByaW50",
            "EjMKBV9tZXRhGAEgASgLMiQuc3BpZGVycm9jay5wcm90b2J1Zi5NZXNzYWdl",
            "TWV0YWRhdGESNAoEcGtleRgCIAEoCzImLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "QXVjdGlvblByaW50LlBLZXkSLgoGdGlja2VyGGQgASgLMh4uc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5UaWNrZXJLZXkSMAoKdHJhZGVfZGF0ZRhlIAEoCzIcLnNw",
            "aWRlcnJvY2sucHJvdG9idWYuRGF0ZUtleRIvCgtub3RpY2VfdGltZRhmIAEo",
            "CzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASNgoMYXVjdGlvbl90eXBl",
            "GGcgASgOMiAuc3BpZGVycm9jay5wcm90b2J1Zi5BdWN0aW9uVHlwZRI6Cg5h",
            "dWN0aW9uX3NvdXJjZRhoIAEoDjIiLnNwaWRlcnJvY2sucHJvdG9idWYuQXVj",
            "dGlvblNvdXJjZRIUCgxudW1fb3B0X2xlZ3MYaSABKAUSOgoMc3ByZWFkX2Ns",
            "YXNzGGogASgOMiQuc3BpZGVycm9jay5wcm90b2J1Zi5Ub29sU3ByZWFkQ2xh",
            "c3MSOAoNc3ByZWFkX2ZsYXZvchhrIAEoDjIhLnNwaWRlcnJvY2sucHJvdG9i",
            "dWYuU3ByZWFkRmxhdm9yEjIKDmNvbnRhaW5zX2hlZGdlGGwgASgOMhouc3Bp",
            "ZGVycm9jay5wcm90b2J1Zi5ZZXNObxIxCg1jb250YWluc19mbGV4GG0gASgO",
            "Mhouc3BpZGVycm9jay5wcm90b2J1Zi5ZZXNObxI4ChRjb250YWluc19tdWx0",
            "aV9oZWRnZRhuIAEoDjIaLnNwaWRlcnJvY2sucHJvdG9idWYuWWVzTm8SEAoI",
            "aW5kdXN0cnkYbyABKAkSNAoLc3ltYm9sX3R5cGUYcCABKA4yHy5zcGlkZXJy",
            "b2NrLnByb3RvYnVmLlN5bWJvbFR5cGUSFwoPdV9hdmdfZGFpbHlfdmxtGHEg",
            "ASgCEi8KCWN1c3Rfc2lkZRhyIAEoDjIcLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "QnV5U2VsbBIQCghjdXN0X3F0eRhzIAEoBRIQCghjdXN0X3ByYxh0IAEoARIw",
            "CgxoYXNfY3VzdF9wcmMYdSABKA4yGi5zcGlkZXJyb2NrLnByb3RvYnVmLlll",
            "c05vEjUKDmN1c3RfZmlybV90eXBlGHYgASgOMh0uc3BpZGVycm9jay5wcm90",
            "b2J1Zi5GaXJtVHlwZRIXCg9jdXN0X2FnZW50X21QSUQYdyABKAkSGAoQY3Vz",
            "dF9jbGllbnRfZmlybRh4IAEoCRIRCglwcnRfcHJpY2UYeSABKAESEgoKcHJ0",
            "X3ByaWNlMhh6IAEoARIQCghwcnRfc2l6ZRh7IAEoBRIRCglwcnRfc2l6ZTIY",
            "fCABKAUSLAoIcHJ0X3RpbWUYfSABKAsyGi5nb29nbGUucHJvdG9idWYuVGlt",
            "ZXN0YW1wEi4KCHBydF90eXBlGH4gASgOMhwuc3BpZGVycm9jay5wcm90b2J1",
            "Zi5QcnRUeXBlEhAKCHBydF91QmlkGH8gASgBEhEKCHBydF91QXNrGIABIAEo",
            "ARIRCghwcnRfdVByYxiBASABKAESFQoMcHJ0X3N1cmZfdm9sGIIBIAEoAhIV",
            "CgxwcnRfc3VyZl9wcmMYgwEgASgCEhAKB2JpZF9wcmMYhAEgASgCEg8KBmJp",
            "ZF9zehiFASABKAUSEQoIYmlkX21hc2sYhgEgASgNEhAKB2Fza19wcmMYhwEg",
            "ASgCEg8KBmFza19zehiIASABKAUSEQoIYXNrX21hc2sYiQEgASgNEhUKDGV4",
            "Y2hfYmlkX3ByYxiKASABKAISFAoLZXhjaF9iaWRfc3oYiwEgASgFEhUKDGV4",
            "Y2hfYXNrX3ByYxiMASABKAISFAoLZXhjaF9hc2tfc3oYjQEgASgFEg8KBm5l",
            "dF9kZRiOASABKAISDwoGbmV0X2dhGI8BIAEoAhIPCgZuZXRfdGgYkAEgASgC",
            "Eg8KBm5ldF92ZRiRASABKAISEAoHdV9wcmMxbRiSASABKAISEgoJYmlkX3By",
            "YzFtGJMBIAEoAhISCglhc2tfcHJjMW0YlAEgASgCEhMKCnN1cmZfdm9sMW0Y",
            "lQEgASgCEhMKCnN1cmZfcHJjMW0YlgEgASgCEhEKCHVfcHJjMTBtGJcBIAEo",
            "AhITCgpiaWRfcHJjMTBtGJgBIAEoAhITCgphc2tfcHJjMTBtGJkBIAEoAhIU",
            "CgtzdXJmX3ZvbDEwbRiaASABKAISFAoLc3VyZl9wcmMxMG0YmwEgASgCEi4K",
            "CXRpbWVzdGFtcBicASABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1w",
            "Gh0KBFBLZXkSFQoNbm90aWNlX251bWJlchgKIAEoA2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.AuctionPrint), global::Spiderrock.Protobuf.AuctionPrint.Parser, new[]{ "Meta", "Pkey", "Ticker", "TradeDate", "NoticeTime", "AuctionType", "AuctionSource", "NumOptLegs", "SpreadClass", "SpreadFlavor", "ContainsHedge", "ContainsFlex", "ContainsMultiHedge", "Industry", "SymbolType", "UAvgDailyVlm", "CustSide", "CustQty", "CustPrc", "HasCustPrc", "CustFirmType", "CustAgentMPID", "CustClientFirm", "PrtPrice", "PrtPrice2", "PrtSize", "PrtSize2", "PrtTime", "PrtType", "PrtUBid", "PrtUAsk", "PrtUPrc", "PrtSurfVol", "PrtSurfPrc", "BidPrc", "BidSz", "BidMask", "AskPrc", "AskSz", "AskMask", "ExchBidPrc", "ExchBidSz", "ExchAskPrc", "ExchAskSz", "NetDe", "NetGa", "NetTh", "NetVe", "UPrc1M", "BidPrc1M", "AskPrc1M", "SurfVol1M", "SurfPrc1M", "UPrc10M", "BidPrc10M", "AskPrc10M", "SurfVol10M", "SurfPrc10M", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.AuctionPrint.Types.PKey), global::Spiderrock.Protobuf.AuctionPrint.Types.PKey.Parser, new[]{ "NoticeNumber" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AuctionPrint : pb::IMessage<AuctionPrint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AuctionPrint> _parser = new pb::MessageParser<AuctionPrint>(() => new AuctionPrint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AuctionPrint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.AuctionPrintReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AuctionPrint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AuctionPrint(AuctionPrint other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
      tradeDate_ = other.tradeDate_ != null ? other.tradeDate_.Clone() : null;
      noticeTime_ = other.noticeTime_ != null ? other.noticeTime_.Clone() : null;
      auctionType_ = other.auctionType_;
      auctionSource_ = other.auctionSource_;
      numOptLegs_ = other.numOptLegs_;
      spreadClass_ = other.spreadClass_;
      spreadFlavor_ = other.spreadFlavor_;
      containsHedge_ = other.containsHedge_;
      containsFlex_ = other.containsFlex_;
      containsMultiHedge_ = other.containsMultiHedge_;
      industry_ = other.industry_;
      symbolType_ = other.symbolType_;
      uAvgDailyVlm_ = other.uAvgDailyVlm_;
      custSide_ = other.custSide_;
      custQty_ = other.custQty_;
      custPrc_ = other.custPrc_;
      hasCustPrc_ = other.hasCustPrc_;
      custFirmType_ = other.custFirmType_;
      custAgentMPID_ = other.custAgentMPID_;
      custClientFirm_ = other.custClientFirm_;
      prtPrice_ = other.prtPrice_;
      prtPrice2_ = other.prtPrice2_;
      prtSize_ = other.prtSize_;
      prtSize2_ = other.prtSize2_;
      prtTime_ = other.prtTime_ != null ? other.prtTime_.Clone() : null;
      prtType_ = other.prtType_;
      prtUBid_ = other.prtUBid_;
      prtUAsk_ = other.prtUAsk_;
      prtUPrc_ = other.prtUPrc_;
      prtSurfVol_ = other.prtSurfVol_;
      prtSurfPrc_ = other.prtSurfPrc_;
      bidPrc_ = other.bidPrc_;
      bidSz_ = other.bidSz_;
      bidMask_ = other.bidMask_;
      askPrc_ = other.askPrc_;
      askSz_ = other.askSz_;
      askMask_ = other.askMask_;
      exchBidPrc_ = other.exchBidPrc_;
      exchBidSz_ = other.exchBidSz_;
      exchAskPrc_ = other.exchAskPrc_;
      exchAskSz_ = other.exchAskSz_;
      netDe_ = other.netDe_;
      netGa_ = other.netGa_;
      netTh_ = other.netTh_;
      netVe_ = other.netVe_;
      uPrc1M_ = other.uPrc1M_;
      bidPrc1M_ = other.bidPrc1M_;
      askPrc1M_ = other.askPrc1M_;
      surfVol1M_ = other.surfVol1M_;
      surfPrc1M_ = other.surfPrc1M_;
      uPrc10M_ = other.uPrc10M_;
      bidPrc10M_ = other.bidPrc10M_;
      askPrc10M_ = other.askPrc10M_;
      surfVol10M_ = other.surfVol10M_;
      surfPrc10M_ = other.surfPrc10M_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AuctionPrint Clone() {
      return new AuctionPrint(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.AuctionPrint.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AuctionPrint.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 100;
    private global::Spiderrock.Protobuf.TickerKey ticker_;
    /// <summary>
    /// underlier ticker
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Ticker {
      get { return ticker_; }
      set {
        ticker_ = value;
      }
    }

    /// <summary>Field number for the "trade_date" field.</summary>
    public const int TradeDateFieldNumber = 101;
    private global::Spiderrock.Protobuf.DateKey tradeDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.DateKey TradeDate {
      get { return tradeDate_; }
      set {
        tradeDate_ = value;
      }
    }

    /// <summary>Field number for the "notice_time" field.</summary>
    public const int NoticeTimeFieldNumber = 102;
    private global::Google.Protobuf.WellKnownTypes.Timestamp noticeTime_;
    /// <summary>
    /// notice create timestamp (high precision)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp NoticeTime {
      get { return noticeTime_; }
      set {
        noticeTime_ = value;
      }
    }

    /// <summary>Field number for the "auction_type" field.</summary>
    public const int AuctionTypeFieldNumber = 103;
    private global::Spiderrock.Protobuf.AuctionType auctionType_ = global::Spiderrock.Protobuf.AuctionType.Unspecified;
    /// <summary>
    /// (eg. Block, Flash, Improvement, Facilitation, etc.)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AuctionType AuctionType {
      get { return auctionType_; }
      set {
        auctionType_ = value;
      }
    }

    /// <summary>Field number for the "auction_source" field.</summary>
    public const int AuctionSourceFieldNumber = 104;
    private global::Spiderrock.Protobuf.AuctionSource auctionSource_ = global::Spiderrock.Protobuf.AuctionSource.Unspecified;
    /// <summary>
    /// source of the auction notice (eg. SRC, MIAX, etc.)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AuctionSource AuctionSource {
      get { return auctionSource_; }
      set {
        auctionSource_ = value;
      }
    }

    /// <summary>Field number for the "num_opt_legs" field.</summary>
    public const int NumOptLegsFieldNumber = 105;
    private int numOptLegs_;
    /// <summary>
    /// MLEG Only
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumOptLegs {
      get { return numOptLegs_; }
      set {
        numOptLegs_ = value;
      }
    }

    /// <summary>Field number for the "spread_class" field.</summary>
    public const int SpreadClassFieldNumber = 106;
    private global::Spiderrock.Protobuf.ToolSpreadClass spreadClass_ = global::Spiderrock.Protobuf.ToolSpreadClass.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ToolSpreadClass SpreadClass {
      get { return spreadClass_; }
      set {
        spreadClass_ = value;
      }
    }

    /// <summary>Field number for the "spread_flavor" field.</summary>
    public const int SpreadFlavorFieldNumber = 107;
    private global::Spiderrock.Protobuf.SpreadFlavor spreadFlavor_ = global::Spiderrock.Protobuf.SpreadFlavor.Unspecified;
    /// <summary>
    /// MLEG Only
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpreadFlavor SpreadFlavor {
      get { return spreadFlavor_; }
      set {
        spreadFlavor_ = value;
      }
    }

    /// <summary>Field number for the "contains_hedge" field.</summary>
    public const int ContainsHedgeFieldNumber = 108;
    private global::Spiderrock.Protobuf.YesNo containsHedge_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// MLEG Only
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo ContainsHedge {
      get { return containsHedge_; }
      set {
        containsHedge_ = value;
      }
    }

    /// <summary>Field number for the "contains_flex" field.</summary>
    public const int ContainsFlexFieldNumber = 109;
    private global::Spiderrock.Protobuf.YesNo containsFlex_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// contains FLEX options (not regular listed options)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo ContainsFlex {
      get { return containsFlex_; }
      set {
        containsFlex_ = value;
      }
    }

    /// <summary>Field number for the "contains_multi_hedge" field.</summary>
    public const int ContainsMultiHedgeFieldNumber = 110;
    private global::Spiderrock.Protobuf.YesNo containsMultiHedge_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// contains MultiHedge (corp action adjusted) options
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo ContainsMultiHedge {
      get { return containsMultiHedge_; }
      set {
        containsMultiHedge_ = value;
      }
    }

    /// <summary>Field number for the "industry" field.</summary>
    public const int IndustryFieldNumber = 111;
    private string industry_ = "";
    /// <summary>
    /// industry string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Industry {
      get { return industry_; }
      set {
        industry_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbol_type" field.</summary>
    public const int SymbolTypeFieldNumber = 112;
    private global::Spiderrock.Protobuf.SymbolType symbolType_ = global::Spiderrock.Protobuf.SymbolType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SymbolType SymbolType {
      get { return symbolType_; }
      set {
        symbolType_ = value;
      }
    }

    /// <summary>Field number for the "u_avg_daily_vlm" field.</summary>
    public const int UAvgDailyVlmFieldNumber = 113;
    private float uAvgDailyVlm_;
    /// <summary>
    /// underlier average daily trading volume
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UAvgDailyVlm {
      get { return uAvgDailyVlm_; }
      set {
        uAvgDailyVlm_ = value;
      }
    }

    /// <summary>Field number for the "cust_side" field.</summary>
    public const int CustSideFieldNumber = 114;
    private global::Spiderrock.Protobuf.BuySell custSide_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
    /// <summary>
    /// from AuctionNotice (if known)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BuySell CustSide {
      get { return custSide_; }
      set {
        custSide_ = value;
      }
    }

    /// <summary>Field number for the "cust_qty" field.</summary>
    public const int CustQtyFieldNumber = 115;
    private int custQty_;
    /// <summary>
    /// from AuctionNotice (if known)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CustQty {
      get { return custQty_; }
      set {
        custQty_ = value;
      }
    }

    /// <summary>Field number for the "cust_prc" field.</summary>
    public const int CustPrcFieldNumber = 116;
    private double custPrc_;
    /// <summary>
    /// from AuctionNotice (if known)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CustPrc {
      get { return custPrc_; }
      set {
        custPrc_ = value;
      }
    }

    /// <summary>Field number for the "has_cust_prc" field.</summary>
    public const int HasCustPrcFieldNumber = 117;
    private global::Spiderrock.Protobuf.YesNo hasCustPrc_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// from AuctionNotice (if known)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo HasCustPrc {
      get { return hasCustPrc_; }
      set {
        hasCustPrc_ = value;
      }
    }

    /// <summary>Field number for the "cust_firm_type" field.</summary>
    public const int CustFirmTypeFieldNumber = 118;
    private global::Spiderrock.Protobuf.FirmType custFirmType_ = global::Spiderrock.Protobuf.FirmType.Unspecified;
    /// <summary>
    /// cust firm type (if disclosed)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.FirmType CustFirmType {
      get { return custFirmType_; }
      set {
        custFirmType_ = value;
      }
    }

    /// <summary>Field number for the "cust_agent_mPID" field.</summary>
    public const int CustAgentMPIDFieldNumber = 119;
    private string custAgentMPID_ = "";
    /// <summary>
    /// cust agent exchange member initiating the auction (if disclosed)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CustAgentMPID {
      get { return custAgentMPID_; }
      set {
        custAgentMPID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cust_client_firm" field.</summary>
    public const int CustClientFirmFieldNumber = 120;
    private string custClientFirm_ = "";
    /// <summary>
    /// cust client firm (if disclosed)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CustClientFirm {
      get { return custClientFirm_; }
      set {
        custClientFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "prt_price" field.</summary>
    public const int PrtPriceFieldNumber = 121;
    private double prtPrice_;
    /// <summary>
    /// reported OPRA print price (pkgPrice if MLeg)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PrtPrice {
      get { return prtPrice_; }
      set {
        prtPrice_ = value;
      }
    }

    /// <summary>Field number for the "prt_price2" field.</summary>
    public const int PrtPrice2FieldNumber = 122;
    private double prtPrice2_;
    /// <summary>
    /// if reported as 2 separate prints at different prices (ie, partial size improvement)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PrtPrice2 {
      get { return prtPrice2_; }
      set {
        prtPrice2_ = value;
      }
    }

    /// <summary>Field number for the "prt_size" field.</summary>
    public const int PrtSizeFieldNumber = 123;
    private int prtSize_;
    /// <summary>
    /// reported OPRA print size (pgkSize if MLeg)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PrtSize {
      get { return prtSize_; }
      set {
        prtSize_ = value;
      }
    }

    /// <summary>Field number for the "prt_size2" field.</summary>
    public const int PrtSize2FieldNumber = 124;
    private int prtSize2_;
    /// <summary>
    /// reported OPRA print size (pgkSize if MLeg)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PrtSize2 {
      get { return prtSize2_; }
      set {
        prtSize2_ = value;
      }
    }

    /// <summary>Field number for the "prt_time" field.</summary>
    public const int PrtTimeFieldNumber = 125;
    private global::Google.Protobuf.WellKnownTypes.Timestamp prtTime_;
    /// <summary>
    /// reported OPRA print time (1st print if MLeg) (high precision)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp PrtTime {
      get { return prtTime_; }
      set {
        prtTime_ = value;
      }
    }

    /// <summary>Field number for the "prt_type" field.</summary>
    public const int PrtTypeFieldNumber = 126;
    private global::Spiderrock.Protobuf.PrtType prtType_ = global::Spiderrock.Protobuf.PrtType.Unspecified;
    /// <summary>
    /// reported OPRA print type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PrtType PrtType {
      get { return prtType_; }
      set {
        prtType_ = value;
      }
    }

    /// <summary>Field number for the "prt_uBid" field.</summary>
    public const int PrtUBidFieldNumber = 127;
    private double prtUBid_;
    /// <summary>
    /// best estimate of uBid @ auction print time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PrtUBid {
      get { return prtUBid_; }
      set {
        prtUBid_ = value;
      }
    }

    /// <summary>Field number for the "prt_uAsk" field.</summary>
    public const int PrtUAskFieldNumber = 128;
    private double prtUAsk_;
    /// <summary>
    /// best estimate of uAsk @ auction print time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PrtUAsk {
      get { return prtUAsk_; }
      set {
        prtUAsk_ = value;
      }
    }

    /// <summary>Field number for the "prt_uPrc" field.</summary>
    public const int PrtUPrcFieldNumber = 129;
    private double prtUPrc_;
    /// <summary>
    /// best estimate of uPrc @ auction print time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PrtUPrc {
      get { return prtUPrc_; }
      set {
        prtUPrc_ = value;
      }
    }

    /// <summary>Field number for the "prt_surf_vol" field.</summary>
    public const int PrtSurfVolFieldNumber = 130;
    private float prtSurfVol_;
    /// <summary>
    /// surface vol @ auction print time (single option auction only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrtSurfVol {
      get { return prtSurfVol_; }
      set {
        prtSurfVol_ = value;
      }
    }

    /// <summary>Field number for the "prt_surf_prc" field.</summary>
    public const int PrtSurfPrcFieldNumber = 131;
    private float prtSurfPrc_;
    /// <summary>
    /// surface prc @ auction print time (@ uMid) (pkgSurfPrc if MLeg)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrtSurfPrc {
      get { return prtSurfPrc_; }
      set {
        prtSurfPrc_ = value;
      }
    }

    /// <summary>Field number for the "bid_prc" field.</summary>
    public const int BidPrcFieldNumber = 132;
    private float bidPrc_;
    /// <summary>
    /// option nbbo bid @ auction print time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BidPrc {
      get { return bidPrc_; }
      set {
        bidPrc_ = value;
      }
    }

    /// <summary>Field number for the "bid_sz" field.</summary>
    public const int BidSzFieldNumber = 133;
    private int bidSz_;
    /// <summary>
    /// nbbo bid cum size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BidSz {
      get { return bidSz_; }
      set {
        bidSz_ = value;
      }
    }

    /// <summary>Field number for the "bid_mask" field.</summary>
    public const int BidMaskFieldNumber = 134;
    private uint bidMask_;
    /// <summary>
    /// nbbo bid exch mask
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint BidMask {
      get { return bidMask_; }
      set {
        bidMask_ = value;
      }
    }

    /// <summary>Field number for the "ask_prc" field.</summary>
    public const int AskPrcFieldNumber = 135;
    private float askPrc_;
    /// <summary>
    /// option nbbo ask @ auction print time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AskPrc {
      get { return askPrc_; }
      set {
        askPrc_ = value;
      }
    }

    /// <summary>Field number for the "ask_sz" field.</summary>
    public const int AskSzFieldNumber = 136;
    private int askSz_;
    /// <summary>
    /// nbbo ask cum size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AskSz {
      get { return askSz_; }
      set {
        askSz_ = value;
      }
    }

    /// <summary>Field number for the "ask_mask" field.</summary>
    public const int AskMaskFieldNumber = 137;
    private uint askMask_;
    /// <summary>
    /// nbbo ask exch mask
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint AskMask {
      get { return askMask_; }
      set {
        askMask_ = value;
      }
    }

    /// <summary>Field number for the "exch_bid_prc" field.</summary>
    public const int ExchBidPrcFieldNumber = 138;
    private float exchBidPrc_;
    /// <summary>
    /// exch bid @ auction print time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ExchBidPrc {
      get { return exchBidPrc_; }
      set {
        exchBidPrc_ = value;
      }
    }

    /// <summary>Field number for the "exch_bid_sz" field.</summary>
    public const int ExchBidSzFieldNumber = 139;
    private int exchBidSz_;
    /// <summary>
    /// exch bid size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ExchBidSz {
      get { return exchBidSz_; }
      set {
        exchBidSz_ = value;
      }
    }

    /// <summary>Field number for the "exch_ask_prc" field.</summary>
    public const int ExchAskPrcFieldNumber = 140;
    private float exchAskPrc_;
    /// <summary>
    /// exch ask @ auction print time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ExchAskPrc {
      get { return exchAskPrc_; }
      set {
        exchAskPrc_ = value;
      }
    }

    /// <summary>Field number for the "exch_ask_sz" field.</summary>
    public const int ExchAskSzFieldNumber = 141;
    private int exchAskSz_;
    /// <summary>
    /// exch ask size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ExchAskSz {
      get { return exchAskSz_; }
      set {
        exchAskSz_ = value;
      }
    }

    /// <summary>Field number for the "net_de" field.</summary>
    public const int NetDeFieldNumber = 142;
    private float netDe_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float NetDe {
      get { return netDe_; }
      set {
        netDe_ = value;
      }
    }

    /// <summary>Field number for the "net_ga" field.</summary>
    public const int NetGaFieldNumber = 143;
    private float netGa_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float NetGa {
      get { return netGa_; }
      set {
        netGa_ = value;
      }
    }

    /// <summary>Field number for the "net_th" field.</summary>
    public const int NetThFieldNumber = 144;
    private float netTh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float NetTh {
      get { return netTh_; }
      set {
        netTh_ = value;
      }
    }

    /// <summary>Field number for the "net_ve" field.</summary>
    public const int NetVeFieldNumber = 145;
    private float netVe_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float NetVe {
      get { return netVe_; }
      set {
        netVe_ = value;
      }
    }

    /// <summary>Field number for the "u_prc1m" field.</summary>
    public const int UPrc1MFieldNumber = 146;
    private float uPrc1M_;
    /// <summary>
    /// uPrc (mid market) @ auction print time + 1m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UPrc1M {
      get { return uPrc1M_; }
      set {
        uPrc1M_ = value;
      }
    }

    /// <summary>Field number for the "bid_prc1m" field.</summary>
    public const int BidPrc1MFieldNumber = 147;
    private float bidPrc1M_;
    /// <summary>
    /// option nbbo bid @ auction print time + 1m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BidPrc1M {
      get { return bidPrc1M_; }
      set {
        bidPrc1M_ = value;
      }
    }

    /// <summary>Field number for the "ask_prc1m" field.</summary>
    public const int AskPrc1MFieldNumber = 148;
    private float askPrc1M_;
    /// <summary>
    /// option nbbo ask @ auction print time + 1m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AskPrc1M {
      get { return askPrc1M_; }
      set {
        askPrc1M_ = value;
      }
    }

    /// <summary>Field number for the "surf_vol1m" field.</summary>
    public const int SurfVol1MFieldNumber = 149;
    private float surfVol1M_;
    /// <summary>
    /// surface vol @ auction print time + 1m (single option auction only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfVol1M {
      get { return surfVol1M_; }
      set {
        surfVol1M_ = value;
      }
    }

    /// <summary>Field number for the "surf_prc1m" field.</summary>
    public const int SurfPrc1MFieldNumber = 150;
    private float surfPrc1M_;
    /// <summary>
    /// surface prc @ auction print time + 1m (@ uMid)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfPrc1M {
      get { return surfPrc1M_; }
      set {
        surfPrc1M_ = value;
      }
    }

    /// <summary>Field number for the "u_prc10m" field.</summary>
    public const int UPrc10MFieldNumber = 151;
    private float uPrc10M_;
    /// <summary>
    /// uPrc (mid market) @ auction print time + 10m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UPrc10M {
      get { return uPrc10M_; }
      set {
        uPrc10M_ = value;
      }
    }

    /// <summary>Field number for the "bid_prc10m" field.</summary>
    public const int BidPrc10MFieldNumber = 152;
    private float bidPrc10M_;
    /// <summary>
    /// option nbbo bid @ auction print time + 10m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BidPrc10M {
      get { return bidPrc10M_; }
      set {
        bidPrc10M_ = value;
      }
    }

    /// <summary>Field number for the "ask_prc10m" field.</summary>
    public const int AskPrc10MFieldNumber = 153;
    private float askPrc10M_;
    /// <summary>
    /// option nbbo ask @ auction print time + 10m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AskPrc10M {
      get { return askPrc10M_; }
      set {
        askPrc10M_ = value;
      }
    }

    /// <summary>Field number for the "surf_vol10m" field.</summary>
    public const int SurfVol10MFieldNumber = 154;
    private float surfVol10M_;
    /// <summary>
    /// surface vol @ auction print time + 10m (single option auction only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfVol10M {
      get { return surfVol10M_; }
      set {
        surfVol10M_ = value;
      }
    }

    /// <summary>Field number for the "surf_prc10m" field.</summary>
    public const int SurfPrc10MFieldNumber = 155;
    private float surfPrc10M_;
    /// <summary>
    /// surface prc @ auction print time + 10m (@ uMid)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfPrc10M {
      get { return surfPrc10M_; }
      set {
        surfPrc10M_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 156;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AuctionPrint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AuctionPrint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (!object.Equals(Ticker, other.Ticker)) return false;
      if (!object.Equals(TradeDate, other.TradeDate)) return false;
      if (!object.Equals(NoticeTime, other.NoticeTime)) return false;
      if (AuctionType != other.AuctionType) return false;
      if (AuctionSource != other.AuctionSource) return false;
      if (NumOptLegs != other.NumOptLegs) return false;
      if (SpreadClass != other.SpreadClass) return false;
      if (SpreadFlavor != other.SpreadFlavor) return false;
      if (ContainsHedge != other.ContainsHedge) return false;
      if (ContainsFlex != other.ContainsFlex) return false;
      if (ContainsMultiHedge != other.ContainsMultiHedge) return false;
      if (Industry != other.Industry) return false;
      if (SymbolType != other.SymbolType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UAvgDailyVlm, other.UAvgDailyVlm)) return false;
      if (CustSide != other.CustSide) return false;
      if (CustQty != other.CustQty) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CustPrc, other.CustPrc)) return false;
      if (HasCustPrc != other.HasCustPrc) return false;
      if (CustFirmType != other.CustFirmType) return false;
      if (CustAgentMPID != other.CustAgentMPID) return false;
      if (CustClientFirm != other.CustClientFirm) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PrtPrice, other.PrtPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PrtPrice2, other.PrtPrice2)) return false;
      if (PrtSize != other.PrtSize) return false;
      if (PrtSize2 != other.PrtSize2) return false;
      if (!object.Equals(PrtTime, other.PrtTime)) return false;
      if (PrtType != other.PrtType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PrtUBid, other.PrtUBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PrtUAsk, other.PrtUAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PrtUPrc, other.PrtUPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrtSurfVol, other.PrtSurfVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrtSurfPrc, other.PrtSurfPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BidPrc, other.BidPrc)) return false;
      if (BidSz != other.BidSz) return false;
      if (BidMask != other.BidMask) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AskPrc, other.AskPrc)) return false;
      if (AskSz != other.AskSz) return false;
      if (AskMask != other.AskMask) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExchBidPrc, other.ExchBidPrc)) return false;
      if (ExchBidSz != other.ExchBidSz) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExchAskPrc, other.ExchAskPrc)) return false;
      if (ExchAskSz != other.ExchAskSz) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NetDe, other.NetDe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NetGa, other.NetGa)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NetTh, other.NetTh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NetVe, other.NetVe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UPrc1M, other.UPrc1M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BidPrc1M, other.BidPrc1M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AskPrc1M, other.AskPrc1M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfVol1M, other.SurfVol1M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfPrc1M, other.SurfPrc1M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UPrc10M, other.UPrc10M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BidPrc10M, other.BidPrc10M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AskPrc10M, other.AskPrc10M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfVol10M, other.SurfVol10M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfPrc10M, other.SurfPrc10M)) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (ticker_ != null) hash ^= Ticker.GetHashCode();
      if (tradeDate_ != null) hash ^= TradeDate.GetHashCode();
      if (noticeTime_ != null) hash ^= NoticeTime.GetHashCode();
      if (AuctionType != global::Spiderrock.Protobuf.AuctionType.Unspecified) hash ^= AuctionType.GetHashCode();
      if (AuctionSource != global::Spiderrock.Protobuf.AuctionSource.Unspecified) hash ^= AuctionSource.GetHashCode();
      if (NumOptLegs != 0) hash ^= NumOptLegs.GetHashCode();
      if (SpreadClass != global::Spiderrock.Protobuf.ToolSpreadClass.Unspecified) hash ^= SpreadClass.GetHashCode();
      if (SpreadFlavor != global::Spiderrock.Protobuf.SpreadFlavor.Unspecified) hash ^= SpreadFlavor.GetHashCode();
      if (ContainsHedge != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= ContainsHedge.GetHashCode();
      if (ContainsFlex != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= ContainsFlex.GetHashCode();
      if (ContainsMultiHedge != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= ContainsMultiHedge.GetHashCode();
      if (Industry.Length != 0) hash ^= Industry.GetHashCode();
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) hash ^= SymbolType.GetHashCode();
      if (UAvgDailyVlm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UAvgDailyVlm);
      if (CustSide != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= CustSide.GetHashCode();
      if (CustQty != 0) hash ^= CustQty.GetHashCode();
      if (CustPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CustPrc);
      if (HasCustPrc != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= HasCustPrc.GetHashCode();
      if (CustFirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) hash ^= CustFirmType.GetHashCode();
      if (CustAgentMPID.Length != 0) hash ^= CustAgentMPID.GetHashCode();
      if (CustClientFirm.Length != 0) hash ^= CustClientFirm.GetHashCode();
      if (PrtPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PrtPrice);
      if (PrtPrice2 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PrtPrice2);
      if (PrtSize != 0) hash ^= PrtSize.GetHashCode();
      if (PrtSize2 != 0) hash ^= PrtSize2.GetHashCode();
      if (prtTime_ != null) hash ^= PrtTime.GetHashCode();
      if (PrtType != global::Spiderrock.Protobuf.PrtType.Unspecified) hash ^= PrtType.GetHashCode();
      if (PrtUBid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PrtUBid);
      if (PrtUAsk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PrtUAsk);
      if (PrtUPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PrtUPrc);
      if (PrtSurfVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrtSurfVol);
      if (PrtSurfPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrtSurfPrc);
      if (BidPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BidPrc);
      if (BidSz != 0) hash ^= BidSz.GetHashCode();
      if (BidMask != 0) hash ^= BidMask.GetHashCode();
      if (AskPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AskPrc);
      if (AskSz != 0) hash ^= AskSz.GetHashCode();
      if (AskMask != 0) hash ^= AskMask.GetHashCode();
      if (ExchBidPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExchBidPrc);
      if (ExchBidSz != 0) hash ^= ExchBidSz.GetHashCode();
      if (ExchAskPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExchAskPrc);
      if (ExchAskSz != 0) hash ^= ExchAskSz.GetHashCode();
      if (NetDe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NetDe);
      if (NetGa != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NetGa);
      if (NetTh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NetTh);
      if (NetVe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NetVe);
      if (UPrc1M != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UPrc1M);
      if (BidPrc1M != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BidPrc1M);
      if (AskPrc1M != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AskPrc1M);
      if (SurfVol1M != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfVol1M);
      if (SurfPrc1M != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfPrc1M);
      if (UPrc10M != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UPrc10M);
      if (BidPrc10M != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BidPrc10M);
      if (AskPrc10M != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AskPrc10M);
      if (SurfVol10M != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfVol10M);
      if (SurfPrc10M != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfPrc10M);
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Ticker);
      }
      if (tradeDate_ != null) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(TradeDate);
      }
      if (noticeTime_ != null) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(NoticeTime);
      }
      if (AuctionType != global::Spiderrock.Protobuf.AuctionType.Unspecified) {
        output.WriteRawTag(184, 6);
        output.WriteEnum((int) AuctionType);
      }
      if (AuctionSource != global::Spiderrock.Protobuf.AuctionSource.Unspecified) {
        output.WriteRawTag(192, 6);
        output.WriteEnum((int) AuctionSource);
      }
      if (NumOptLegs != 0) {
        output.WriteRawTag(200, 6);
        output.WriteInt32(NumOptLegs);
      }
      if (SpreadClass != global::Spiderrock.Protobuf.ToolSpreadClass.Unspecified) {
        output.WriteRawTag(208, 6);
        output.WriteEnum((int) SpreadClass);
      }
      if (SpreadFlavor != global::Spiderrock.Protobuf.SpreadFlavor.Unspecified) {
        output.WriteRawTag(216, 6);
        output.WriteEnum((int) SpreadFlavor);
      }
      if (ContainsHedge != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(224, 6);
        output.WriteEnum((int) ContainsHedge);
      }
      if (ContainsFlex != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(232, 6);
        output.WriteEnum((int) ContainsFlex);
      }
      if (ContainsMultiHedge != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(240, 6);
        output.WriteEnum((int) ContainsMultiHedge);
      }
      if (Industry.Length != 0) {
        output.WriteRawTag(250, 6);
        output.WriteString(Industry);
      }
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) SymbolType);
      }
      if (UAvgDailyVlm != 0F) {
        output.WriteRawTag(141, 7);
        output.WriteFloat(UAvgDailyVlm);
      }
      if (CustSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(144, 7);
        output.WriteEnum((int) CustSide);
      }
      if (CustQty != 0) {
        output.WriteRawTag(152, 7);
        output.WriteInt32(CustQty);
      }
      if (CustPrc != 0D) {
        output.WriteRawTag(161, 7);
        output.WriteDouble(CustPrc);
      }
      if (HasCustPrc != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(168, 7);
        output.WriteEnum((int) HasCustPrc);
      }
      if (CustFirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        output.WriteRawTag(176, 7);
        output.WriteEnum((int) CustFirmType);
      }
      if (CustAgentMPID.Length != 0) {
        output.WriteRawTag(186, 7);
        output.WriteString(CustAgentMPID);
      }
      if (CustClientFirm.Length != 0) {
        output.WriteRawTag(194, 7);
        output.WriteString(CustClientFirm);
      }
      if (PrtPrice != 0D) {
        output.WriteRawTag(201, 7);
        output.WriteDouble(PrtPrice);
      }
      if (PrtPrice2 != 0D) {
        output.WriteRawTag(209, 7);
        output.WriteDouble(PrtPrice2);
      }
      if (PrtSize != 0) {
        output.WriteRawTag(216, 7);
        output.WriteInt32(PrtSize);
      }
      if (PrtSize2 != 0) {
        output.WriteRawTag(224, 7);
        output.WriteInt32(PrtSize2);
      }
      if (prtTime_ != null) {
        output.WriteRawTag(234, 7);
        output.WriteMessage(PrtTime);
      }
      if (PrtType != global::Spiderrock.Protobuf.PrtType.Unspecified) {
        output.WriteRawTag(240, 7);
        output.WriteEnum((int) PrtType);
      }
      if (PrtUBid != 0D) {
        output.WriteRawTag(249, 7);
        output.WriteDouble(PrtUBid);
      }
      if (PrtUAsk != 0D) {
        output.WriteRawTag(129, 8);
        output.WriteDouble(PrtUAsk);
      }
      if (PrtUPrc != 0D) {
        output.WriteRawTag(137, 8);
        output.WriteDouble(PrtUPrc);
      }
      if (PrtSurfVol != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(PrtSurfVol);
      }
      if (PrtSurfPrc != 0F) {
        output.WriteRawTag(157, 8);
        output.WriteFloat(PrtSurfPrc);
      }
      if (BidPrc != 0F) {
        output.WriteRawTag(165, 8);
        output.WriteFloat(BidPrc);
      }
      if (BidSz != 0) {
        output.WriteRawTag(168, 8);
        output.WriteInt32(BidSz);
      }
      if (BidMask != 0) {
        output.WriteRawTag(176, 8);
        output.WriteUInt32(BidMask);
      }
      if (AskPrc != 0F) {
        output.WriteRawTag(189, 8);
        output.WriteFloat(AskPrc);
      }
      if (AskSz != 0) {
        output.WriteRawTag(192, 8);
        output.WriteInt32(AskSz);
      }
      if (AskMask != 0) {
        output.WriteRawTag(200, 8);
        output.WriteUInt32(AskMask);
      }
      if (ExchBidPrc != 0F) {
        output.WriteRawTag(213, 8);
        output.WriteFloat(ExchBidPrc);
      }
      if (ExchBidSz != 0) {
        output.WriteRawTag(216, 8);
        output.WriteInt32(ExchBidSz);
      }
      if (ExchAskPrc != 0F) {
        output.WriteRawTag(229, 8);
        output.WriteFloat(ExchAskPrc);
      }
      if (ExchAskSz != 0) {
        output.WriteRawTag(232, 8);
        output.WriteInt32(ExchAskSz);
      }
      if (NetDe != 0F) {
        output.WriteRawTag(245, 8);
        output.WriteFloat(NetDe);
      }
      if (NetGa != 0F) {
        output.WriteRawTag(253, 8);
        output.WriteFloat(NetGa);
      }
      if (NetTh != 0F) {
        output.WriteRawTag(133, 9);
        output.WriteFloat(NetTh);
      }
      if (NetVe != 0F) {
        output.WriteRawTag(141, 9);
        output.WriteFloat(NetVe);
      }
      if (UPrc1M != 0F) {
        output.WriteRawTag(149, 9);
        output.WriteFloat(UPrc1M);
      }
      if (BidPrc1M != 0F) {
        output.WriteRawTag(157, 9);
        output.WriteFloat(BidPrc1M);
      }
      if (AskPrc1M != 0F) {
        output.WriteRawTag(165, 9);
        output.WriteFloat(AskPrc1M);
      }
      if (SurfVol1M != 0F) {
        output.WriteRawTag(173, 9);
        output.WriteFloat(SurfVol1M);
      }
      if (SurfPrc1M != 0F) {
        output.WriteRawTag(181, 9);
        output.WriteFloat(SurfPrc1M);
      }
      if (UPrc10M != 0F) {
        output.WriteRawTag(189, 9);
        output.WriteFloat(UPrc10M);
      }
      if (BidPrc10M != 0F) {
        output.WriteRawTag(197, 9);
        output.WriteFloat(BidPrc10M);
      }
      if (AskPrc10M != 0F) {
        output.WriteRawTag(205, 9);
        output.WriteFloat(AskPrc10M);
      }
      if (SurfVol10M != 0F) {
        output.WriteRawTag(213, 9);
        output.WriteFloat(SurfVol10M);
      }
      if (SurfPrc10M != 0F) {
        output.WriteRawTag(221, 9);
        output.WriteFloat(SurfPrc10M);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(226, 9);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Ticker);
      }
      if (tradeDate_ != null) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(TradeDate);
      }
      if (noticeTime_ != null) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(NoticeTime);
      }
      if (AuctionType != global::Spiderrock.Protobuf.AuctionType.Unspecified) {
        output.WriteRawTag(184, 6);
        output.WriteEnum((int) AuctionType);
      }
      if (AuctionSource != global::Spiderrock.Protobuf.AuctionSource.Unspecified) {
        output.WriteRawTag(192, 6);
        output.WriteEnum((int) AuctionSource);
      }
      if (NumOptLegs != 0) {
        output.WriteRawTag(200, 6);
        output.WriteInt32(NumOptLegs);
      }
      if (SpreadClass != global::Spiderrock.Protobuf.ToolSpreadClass.Unspecified) {
        output.WriteRawTag(208, 6);
        output.WriteEnum((int) SpreadClass);
      }
      if (SpreadFlavor != global::Spiderrock.Protobuf.SpreadFlavor.Unspecified) {
        output.WriteRawTag(216, 6);
        output.WriteEnum((int) SpreadFlavor);
      }
      if (ContainsHedge != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(224, 6);
        output.WriteEnum((int) ContainsHedge);
      }
      if (ContainsFlex != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(232, 6);
        output.WriteEnum((int) ContainsFlex);
      }
      if (ContainsMultiHedge != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(240, 6);
        output.WriteEnum((int) ContainsMultiHedge);
      }
      if (Industry.Length != 0) {
        output.WriteRawTag(250, 6);
        output.WriteString(Industry);
      }
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) SymbolType);
      }
      if (UAvgDailyVlm != 0F) {
        output.WriteRawTag(141, 7);
        output.WriteFloat(UAvgDailyVlm);
      }
      if (CustSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(144, 7);
        output.WriteEnum((int) CustSide);
      }
      if (CustQty != 0) {
        output.WriteRawTag(152, 7);
        output.WriteInt32(CustQty);
      }
      if (CustPrc != 0D) {
        output.WriteRawTag(161, 7);
        output.WriteDouble(CustPrc);
      }
      if (HasCustPrc != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(168, 7);
        output.WriteEnum((int) HasCustPrc);
      }
      if (CustFirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        output.WriteRawTag(176, 7);
        output.WriteEnum((int) CustFirmType);
      }
      if (CustAgentMPID.Length != 0) {
        output.WriteRawTag(186, 7);
        output.WriteString(CustAgentMPID);
      }
      if (CustClientFirm.Length != 0) {
        output.WriteRawTag(194, 7);
        output.WriteString(CustClientFirm);
      }
      if (PrtPrice != 0D) {
        output.WriteRawTag(201, 7);
        output.WriteDouble(PrtPrice);
      }
      if (PrtPrice2 != 0D) {
        output.WriteRawTag(209, 7);
        output.WriteDouble(PrtPrice2);
      }
      if (PrtSize != 0) {
        output.WriteRawTag(216, 7);
        output.WriteInt32(PrtSize);
      }
      if (PrtSize2 != 0) {
        output.WriteRawTag(224, 7);
        output.WriteInt32(PrtSize2);
      }
      if (prtTime_ != null) {
        output.WriteRawTag(234, 7);
        output.WriteMessage(PrtTime);
      }
      if (PrtType != global::Spiderrock.Protobuf.PrtType.Unspecified) {
        output.WriteRawTag(240, 7);
        output.WriteEnum((int) PrtType);
      }
      if (PrtUBid != 0D) {
        output.WriteRawTag(249, 7);
        output.WriteDouble(PrtUBid);
      }
      if (PrtUAsk != 0D) {
        output.WriteRawTag(129, 8);
        output.WriteDouble(PrtUAsk);
      }
      if (PrtUPrc != 0D) {
        output.WriteRawTag(137, 8);
        output.WriteDouble(PrtUPrc);
      }
      if (PrtSurfVol != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(PrtSurfVol);
      }
      if (PrtSurfPrc != 0F) {
        output.WriteRawTag(157, 8);
        output.WriteFloat(PrtSurfPrc);
      }
      if (BidPrc != 0F) {
        output.WriteRawTag(165, 8);
        output.WriteFloat(BidPrc);
      }
      if (BidSz != 0) {
        output.WriteRawTag(168, 8);
        output.WriteInt32(BidSz);
      }
      if (BidMask != 0) {
        output.WriteRawTag(176, 8);
        output.WriteUInt32(BidMask);
      }
      if (AskPrc != 0F) {
        output.WriteRawTag(189, 8);
        output.WriteFloat(AskPrc);
      }
      if (AskSz != 0) {
        output.WriteRawTag(192, 8);
        output.WriteInt32(AskSz);
      }
      if (AskMask != 0) {
        output.WriteRawTag(200, 8);
        output.WriteUInt32(AskMask);
      }
      if (ExchBidPrc != 0F) {
        output.WriteRawTag(213, 8);
        output.WriteFloat(ExchBidPrc);
      }
      if (ExchBidSz != 0) {
        output.WriteRawTag(216, 8);
        output.WriteInt32(ExchBidSz);
      }
      if (ExchAskPrc != 0F) {
        output.WriteRawTag(229, 8);
        output.WriteFloat(ExchAskPrc);
      }
      if (ExchAskSz != 0) {
        output.WriteRawTag(232, 8);
        output.WriteInt32(ExchAskSz);
      }
      if (NetDe != 0F) {
        output.WriteRawTag(245, 8);
        output.WriteFloat(NetDe);
      }
      if (NetGa != 0F) {
        output.WriteRawTag(253, 8);
        output.WriteFloat(NetGa);
      }
      if (NetTh != 0F) {
        output.WriteRawTag(133, 9);
        output.WriteFloat(NetTh);
      }
      if (NetVe != 0F) {
        output.WriteRawTag(141, 9);
        output.WriteFloat(NetVe);
      }
      if (UPrc1M != 0F) {
        output.WriteRawTag(149, 9);
        output.WriteFloat(UPrc1M);
      }
      if (BidPrc1M != 0F) {
        output.WriteRawTag(157, 9);
        output.WriteFloat(BidPrc1M);
      }
      if (AskPrc1M != 0F) {
        output.WriteRawTag(165, 9);
        output.WriteFloat(AskPrc1M);
      }
      if (SurfVol1M != 0F) {
        output.WriteRawTag(173, 9);
        output.WriteFloat(SurfVol1M);
      }
      if (SurfPrc1M != 0F) {
        output.WriteRawTag(181, 9);
        output.WriteFloat(SurfPrc1M);
      }
      if (UPrc10M != 0F) {
        output.WriteRawTag(189, 9);
        output.WriteFloat(UPrc10M);
      }
      if (BidPrc10M != 0F) {
        output.WriteRawTag(197, 9);
        output.WriteFloat(BidPrc10M);
      }
      if (AskPrc10M != 0F) {
        output.WriteRawTag(205, 9);
        output.WriteFloat(AskPrc10M);
      }
      if (SurfVol10M != 0F) {
        output.WriteRawTag(213, 9);
        output.WriteFloat(SurfVol10M);
      }
      if (SurfPrc10M != 0F) {
        output.WriteRawTag(221, 9);
        output.WriteFloat(SurfPrc10M);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(226, 9);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (ticker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
      }
      if (tradeDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TradeDate);
      }
      if (noticeTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NoticeTime);
      }
      if (AuctionType != global::Spiderrock.Protobuf.AuctionType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AuctionType);
      }
      if (AuctionSource != global::Spiderrock.Protobuf.AuctionSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AuctionSource);
      }
      if (NumOptLegs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumOptLegs);
      }
      if (SpreadClass != global::Spiderrock.Protobuf.ToolSpreadClass.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpreadClass);
      }
      if (SpreadFlavor != global::Spiderrock.Protobuf.SpreadFlavor.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpreadFlavor);
      }
      if (ContainsHedge != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ContainsHedge);
      }
      if (ContainsFlex != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ContainsFlex);
      }
      if (ContainsMultiHedge != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ContainsMultiHedge);
      }
      if (Industry.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Industry);
      }
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SymbolType);
      }
      if (UAvgDailyVlm != 0F) {
        size += 2 + 4;
      }
      if (CustSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CustSide);
      }
      if (CustQty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CustQty);
      }
      if (CustPrc != 0D) {
        size += 2 + 8;
      }
      if (HasCustPrc != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HasCustPrc);
      }
      if (CustFirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CustFirmType);
      }
      if (CustAgentMPID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CustAgentMPID);
      }
      if (CustClientFirm.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CustClientFirm);
      }
      if (PrtPrice != 0D) {
        size += 2 + 8;
      }
      if (PrtPrice2 != 0D) {
        size += 2 + 8;
      }
      if (PrtSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PrtSize);
      }
      if (PrtSize2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PrtSize2);
      }
      if (prtTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PrtTime);
      }
      if (PrtType != global::Spiderrock.Protobuf.PrtType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PrtType);
      }
      if (PrtUBid != 0D) {
        size += 2 + 8;
      }
      if (PrtUAsk != 0D) {
        size += 2 + 8;
      }
      if (PrtUPrc != 0D) {
        size += 2 + 8;
      }
      if (PrtSurfVol != 0F) {
        size += 2 + 4;
      }
      if (PrtSurfPrc != 0F) {
        size += 2 + 4;
      }
      if (BidPrc != 0F) {
        size += 2 + 4;
      }
      if (BidSz != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BidSz);
      }
      if (BidMask != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BidMask);
      }
      if (AskPrc != 0F) {
        size += 2 + 4;
      }
      if (AskSz != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AskSz);
      }
      if (AskMask != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AskMask);
      }
      if (ExchBidPrc != 0F) {
        size += 2 + 4;
      }
      if (ExchBidSz != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExchBidSz);
      }
      if (ExchAskPrc != 0F) {
        size += 2 + 4;
      }
      if (ExchAskSz != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExchAskSz);
      }
      if (NetDe != 0F) {
        size += 2 + 4;
      }
      if (NetGa != 0F) {
        size += 2 + 4;
      }
      if (NetTh != 0F) {
        size += 2 + 4;
      }
      if (NetVe != 0F) {
        size += 2 + 4;
      }
      if (UPrc1M != 0F) {
        size += 2 + 4;
      }
      if (BidPrc1M != 0F) {
        size += 2 + 4;
      }
      if (AskPrc1M != 0F) {
        size += 2 + 4;
      }
      if (SurfVol1M != 0F) {
        size += 2 + 4;
      }
      if (SurfPrc1M != 0F) {
        size += 2 + 4;
      }
      if (UPrc10M != 0F) {
        size += 2 + 4;
      }
      if (BidPrc10M != 0F) {
        size += 2 + 4;
      }
      if (AskPrc10M != 0F) {
        size += 2 + 4;
      }
      if (SurfVol10M != 0F) {
        size += 2 + 4;
      }
      if (SurfPrc10M != 0F) {
        size += 2 + 4;
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AuctionPrint other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.AuctionPrint.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.ticker_ != null) {
        if (ticker_ == null) {
          Ticker = new global::Spiderrock.Protobuf.TickerKey();
        }
        Ticker.MergeFrom(other.Ticker);
      }
      if (other.tradeDate_ != null) {
        if (tradeDate_ == null) {
          TradeDate = new global::Spiderrock.Protobuf.DateKey();
        }
        TradeDate.MergeFrom(other.TradeDate);
      }
      if (other.noticeTime_ != null) {
        if (noticeTime_ == null) {
          NoticeTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        NoticeTime.MergeFrom(other.NoticeTime);
      }
      if (other.AuctionType != global::Spiderrock.Protobuf.AuctionType.Unspecified) {
        AuctionType = other.AuctionType;
      }
      if (other.AuctionSource != global::Spiderrock.Protobuf.AuctionSource.Unspecified) {
        AuctionSource = other.AuctionSource;
      }
      if (other.NumOptLegs != 0) {
        NumOptLegs = other.NumOptLegs;
      }
      if (other.SpreadClass != global::Spiderrock.Protobuf.ToolSpreadClass.Unspecified) {
        SpreadClass = other.SpreadClass;
      }
      if (other.SpreadFlavor != global::Spiderrock.Protobuf.SpreadFlavor.Unspecified) {
        SpreadFlavor = other.SpreadFlavor;
      }
      if (other.ContainsHedge != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        ContainsHedge = other.ContainsHedge;
      }
      if (other.ContainsFlex != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        ContainsFlex = other.ContainsFlex;
      }
      if (other.ContainsMultiHedge != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        ContainsMultiHedge = other.ContainsMultiHedge;
      }
      if (other.Industry.Length != 0) {
        Industry = other.Industry;
      }
      if (other.SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        SymbolType = other.SymbolType;
      }
      if (other.UAvgDailyVlm != 0F) {
        UAvgDailyVlm = other.UAvgDailyVlm;
      }
      if (other.CustSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        CustSide = other.CustSide;
      }
      if (other.CustQty != 0) {
        CustQty = other.CustQty;
      }
      if (other.CustPrc != 0D) {
        CustPrc = other.CustPrc;
      }
      if (other.HasCustPrc != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        HasCustPrc = other.HasCustPrc;
      }
      if (other.CustFirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        CustFirmType = other.CustFirmType;
      }
      if (other.CustAgentMPID.Length != 0) {
        CustAgentMPID = other.CustAgentMPID;
      }
      if (other.CustClientFirm.Length != 0) {
        CustClientFirm = other.CustClientFirm;
      }
      if (other.PrtPrice != 0D) {
        PrtPrice = other.PrtPrice;
      }
      if (other.PrtPrice2 != 0D) {
        PrtPrice2 = other.PrtPrice2;
      }
      if (other.PrtSize != 0) {
        PrtSize = other.PrtSize;
      }
      if (other.PrtSize2 != 0) {
        PrtSize2 = other.PrtSize2;
      }
      if (other.prtTime_ != null) {
        if (prtTime_ == null) {
          PrtTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        PrtTime.MergeFrom(other.PrtTime);
      }
      if (other.PrtType != global::Spiderrock.Protobuf.PrtType.Unspecified) {
        PrtType = other.PrtType;
      }
      if (other.PrtUBid != 0D) {
        PrtUBid = other.PrtUBid;
      }
      if (other.PrtUAsk != 0D) {
        PrtUAsk = other.PrtUAsk;
      }
      if (other.PrtUPrc != 0D) {
        PrtUPrc = other.PrtUPrc;
      }
      if (other.PrtSurfVol != 0F) {
        PrtSurfVol = other.PrtSurfVol;
      }
      if (other.PrtSurfPrc != 0F) {
        PrtSurfPrc = other.PrtSurfPrc;
      }
      if (other.BidPrc != 0F) {
        BidPrc = other.BidPrc;
      }
      if (other.BidSz != 0) {
        BidSz = other.BidSz;
      }
      if (other.BidMask != 0) {
        BidMask = other.BidMask;
      }
      if (other.AskPrc != 0F) {
        AskPrc = other.AskPrc;
      }
      if (other.AskSz != 0) {
        AskSz = other.AskSz;
      }
      if (other.AskMask != 0) {
        AskMask = other.AskMask;
      }
      if (other.ExchBidPrc != 0F) {
        ExchBidPrc = other.ExchBidPrc;
      }
      if (other.ExchBidSz != 0) {
        ExchBidSz = other.ExchBidSz;
      }
      if (other.ExchAskPrc != 0F) {
        ExchAskPrc = other.ExchAskPrc;
      }
      if (other.ExchAskSz != 0) {
        ExchAskSz = other.ExchAskSz;
      }
      if (other.NetDe != 0F) {
        NetDe = other.NetDe;
      }
      if (other.NetGa != 0F) {
        NetGa = other.NetGa;
      }
      if (other.NetTh != 0F) {
        NetTh = other.NetTh;
      }
      if (other.NetVe != 0F) {
        NetVe = other.NetVe;
      }
      if (other.UPrc1M != 0F) {
        UPrc1M = other.UPrc1M;
      }
      if (other.BidPrc1M != 0F) {
        BidPrc1M = other.BidPrc1M;
      }
      if (other.AskPrc1M != 0F) {
        AskPrc1M = other.AskPrc1M;
      }
      if (other.SurfVol1M != 0F) {
        SurfVol1M = other.SurfVol1M;
      }
      if (other.SurfPrc1M != 0F) {
        SurfPrc1M = other.SurfPrc1M;
      }
      if (other.UPrc10M != 0F) {
        UPrc10M = other.UPrc10M;
      }
      if (other.BidPrc10M != 0F) {
        BidPrc10M = other.BidPrc10M;
      }
      if (other.AskPrc10M != 0F) {
        AskPrc10M = other.AskPrc10M;
      }
      if (other.SurfVol10M != 0F) {
        SurfVol10M = other.SurfVol10M;
      }
      if (other.SurfPrc10M != 0F) {
        SurfPrc10M = other.SurfPrc10M;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.AuctionPrint.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 810: {
            if (tradeDate_ == null) {
              TradeDate = new global::Spiderrock.Protobuf.DateKey();
            }
            input.ReadMessage(TradeDate);
            break;
          }
          case 818: {
            if (noticeTime_ == null) {
              NoticeTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(NoticeTime);
            break;
          }
          case 824: {
            AuctionType = (global::Spiderrock.Protobuf.AuctionType) input.ReadEnum();
            break;
          }
          case 832: {
            AuctionSource = (global::Spiderrock.Protobuf.AuctionSource) input.ReadEnum();
            break;
          }
          case 840: {
            NumOptLegs = input.ReadInt32();
            break;
          }
          case 848: {
            SpreadClass = (global::Spiderrock.Protobuf.ToolSpreadClass) input.ReadEnum();
            break;
          }
          case 856: {
            SpreadFlavor = (global::Spiderrock.Protobuf.SpreadFlavor) input.ReadEnum();
            break;
          }
          case 864: {
            ContainsHedge = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 872: {
            ContainsFlex = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 880: {
            ContainsMultiHedge = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 890: {
            Industry = input.ReadString();
            break;
          }
          case 896: {
            SymbolType = (global::Spiderrock.Protobuf.SymbolType) input.ReadEnum();
            break;
          }
          case 909: {
            UAvgDailyVlm = input.ReadFloat();
            break;
          }
          case 912: {
            CustSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 920: {
            CustQty = input.ReadInt32();
            break;
          }
          case 929: {
            CustPrc = input.ReadDouble();
            break;
          }
          case 936: {
            HasCustPrc = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 944: {
            CustFirmType = (global::Spiderrock.Protobuf.FirmType) input.ReadEnum();
            break;
          }
          case 954: {
            CustAgentMPID = input.ReadString();
            break;
          }
          case 962: {
            CustClientFirm = input.ReadString();
            break;
          }
          case 969: {
            PrtPrice = input.ReadDouble();
            break;
          }
          case 977: {
            PrtPrice2 = input.ReadDouble();
            break;
          }
          case 984: {
            PrtSize = input.ReadInt32();
            break;
          }
          case 992: {
            PrtSize2 = input.ReadInt32();
            break;
          }
          case 1002: {
            if (prtTime_ == null) {
              PrtTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PrtTime);
            break;
          }
          case 1008: {
            PrtType = (global::Spiderrock.Protobuf.PrtType) input.ReadEnum();
            break;
          }
          case 1017: {
            PrtUBid = input.ReadDouble();
            break;
          }
          case 1025: {
            PrtUAsk = input.ReadDouble();
            break;
          }
          case 1033: {
            PrtUPrc = input.ReadDouble();
            break;
          }
          case 1045: {
            PrtSurfVol = input.ReadFloat();
            break;
          }
          case 1053: {
            PrtSurfPrc = input.ReadFloat();
            break;
          }
          case 1061: {
            BidPrc = input.ReadFloat();
            break;
          }
          case 1064: {
            BidSz = input.ReadInt32();
            break;
          }
          case 1072: {
            BidMask = input.ReadUInt32();
            break;
          }
          case 1085: {
            AskPrc = input.ReadFloat();
            break;
          }
          case 1088: {
            AskSz = input.ReadInt32();
            break;
          }
          case 1096: {
            AskMask = input.ReadUInt32();
            break;
          }
          case 1109: {
            ExchBidPrc = input.ReadFloat();
            break;
          }
          case 1112: {
            ExchBidSz = input.ReadInt32();
            break;
          }
          case 1125: {
            ExchAskPrc = input.ReadFloat();
            break;
          }
          case 1128: {
            ExchAskSz = input.ReadInt32();
            break;
          }
          case 1141: {
            NetDe = input.ReadFloat();
            break;
          }
          case 1149: {
            NetGa = input.ReadFloat();
            break;
          }
          case 1157: {
            NetTh = input.ReadFloat();
            break;
          }
          case 1165: {
            NetVe = input.ReadFloat();
            break;
          }
          case 1173: {
            UPrc1M = input.ReadFloat();
            break;
          }
          case 1181: {
            BidPrc1M = input.ReadFloat();
            break;
          }
          case 1189: {
            AskPrc1M = input.ReadFloat();
            break;
          }
          case 1197: {
            SurfVol1M = input.ReadFloat();
            break;
          }
          case 1205: {
            SurfPrc1M = input.ReadFloat();
            break;
          }
          case 1213: {
            UPrc10M = input.ReadFloat();
            break;
          }
          case 1221: {
            BidPrc10M = input.ReadFloat();
            break;
          }
          case 1229: {
            AskPrc10M = input.ReadFloat();
            break;
          }
          case 1237: {
            SurfVol10M = input.ReadFloat();
            break;
          }
          case 1245: {
            SurfPrc10M = input.ReadFloat();
            break;
          }
          case 1250: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.AuctionPrint.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 810: {
            if (tradeDate_ == null) {
              TradeDate = new global::Spiderrock.Protobuf.DateKey();
            }
            input.ReadMessage(TradeDate);
            break;
          }
          case 818: {
            if (noticeTime_ == null) {
              NoticeTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(NoticeTime);
            break;
          }
          case 824: {
            AuctionType = (global::Spiderrock.Protobuf.AuctionType) input.ReadEnum();
            break;
          }
          case 832: {
            AuctionSource = (global::Spiderrock.Protobuf.AuctionSource) input.ReadEnum();
            break;
          }
          case 840: {
            NumOptLegs = input.ReadInt32();
            break;
          }
          case 848: {
            SpreadClass = (global::Spiderrock.Protobuf.ToolSpreadClass) input.ReadEnum();
            break;
          }
          case 856: {
            SpreadFlavor = (global::Spiderrock.Protobuf.SpreadFlavor) input.ReadEnum();
            break;
          }
          case 864: {
            ContainsHedge = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 872: {
            ContainsFlex = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 880: {
            ContainsMultiHedge = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 890: {
            Industry = input.ReadString();
            break;
          }
          case 896: {
            SymbolType = (global::Spiderrock.Protobuf.SymbolType) input.ReadEnum();
            break;
          }
          case 909: {
            UAvgDailyVlm = input.ReadFloat();
            break;
          }
          case 912: {
            CustSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 920: {
            CustQty = input.ReadInt32();
            break;
          }
          case 929: {
            CustPrc = input.ReadDouble();
            break;
          }
          case 936: {
            HasCustPrc = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 944: {
            CustFirmType = (global::Spiderrock.Protobuf.FirmType) input.ReadEnum();
            break;
          }
          case 954: {
            CustAgentMPID = input.ReadString();
            break;
          }
          case 962: {
            CustClientFirm = input.ReadString();
            break;
          }
          case 969: {
            PrtPrice = input.ReadDouble();
            break;
          }
          case 977: {
            PrtPrice2 = input.ReadDouble();
            break;
          }
          case 984: {
            PrtSize = input.ReadInt32();
            break;
          }
          case 992: {
            PrtSize2 = input.ReadInt32();
            break;
          }
          case 1002: {
            if (prtTime_ == null) {
              PrtTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PrtTime);
            break;
          }
          case 1008: {
            PrtType = (global::Spiderrock.Protobuf.PrtType) input.ReadEnum();
            break;
          }
          case 1017: {
            PrtUBid = input.ReadDouble();
            break;
          }
          case 1025: {
            PrtUAsk = input.ReadDouble();
            break;
          }
          case 1033: {
            PrtUPrc = input.ReadDouble();
            break;
          }
          case 1045: {
            PrtSurfVol = input.ReadFloat();
            break;
          }
          case 1053: {
            PrtSurfPrc = input.ReadFloat();
            break;
          }
          case 1061: {
            BidPrc = input.ReadFloat();
            break;
          }
          case 1064: {
            BidSz = input.ReadInt32();
            break;
          }
          case 1072: {
            BidMask = input.ReadUInt32();
            break;
          }
          case 1085: {
            AskPrc = input.ReadFloat();
            break;
          }
          case 1088: {
            AskSz = input.ReadInt32();
            break;
          }
          case 1096: {
            AskMask = input.ReadUInt32();
            break;
          }
          case 1109: {
            ExchBidPrc = input.ReadFloat();
            break;
          }
          case 1112: {
            ExchBidSz = input.ReadInt32();
            break;
          }
          case 1125: {
            ExchAskPrc = input.ReadFloat();
            break;
          }
          case 1128: {
            ExchAskSz = input.ReadInt32();
            break;
          }
          case 1141: {
            NetDe = input.ReadFloat();
            break;
          }
          case 1149: {
            NetGa = input.ReadFloat();
            break;
          }
          case 1157: {
            NetTh = input.ReadFloat();
            break;
          }
          case 1165: {
            NetVe = input.ReadFloat();
            break;
          }
          case 1173: {
            UPrc1M = input.ReadFloat();
            break;
          }
          case 1181: {
            BidPrc1M = input.ReadFloat();
            break;
          }
          case 1189: {
            AskPrc1M = input.ReadFloat();
            break;
          }
          case 1197: {
            SurfVol1M = input.ReadFloat();
            break;
          }
          case 1205: {
            SurfPrc1M = input.ReadFloat();
            break;
          }
          case 1213: {
            UPrc10M = input.ReadFloat();
            break;
          }
          case 1221: {
            BidPrc10M = input.ReadFloat();
            break;
          }
          case 1229: {
            AskPrc10M = input.ReadFloat();
            break;
          }
          case 1237: {
            SurfVol10M = input.ReadFloat();
            break;
          }
          case 1245: {
            SurfPrc10M = input.ReadFloat();
            break;
          }
          case 1250: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the AuctionPrint message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.AuctionPrint.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          noticeNumber_ = other.noticeNumber_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "notice_number" field.</summary>
        public const int NoticeNumberFieldNumber = 10;
        private long noticeNumber_;
        /// <summary>
        /// AuctionNotice.noticeNumber
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long NoticeNumber {
          get { return noticeNumber_; }
          set {
            noticeNumber_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (NoticeNumber != other.NoticeNumber) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (NoticeNumber != 0L) hash ^= NoticeNumber.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (NoticeNumber != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(NoticeNumber);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (NoticeNumber != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(NoticeNumber);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (NoticeNumber != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(NoticeNumber);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.NoticeNumber != 0L) {
            NoticeNumber = other.NoticeNumber;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 80: {
                NoticeNumber = input.ReadInt64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 80: {
                NoticeNumber = input.ReadInt64();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
